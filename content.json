{"meta":{"title":"司徒大官人","subtitle":"热爱网站建设的前端设计工作者","description":"专注WEB开发的技术博客！","author":"司徒大官人","url":"https://sifengjing.github.io"},"pages":[{"title":"","date":"2024-07-08T02:44:53.665Z","updated":"2018-12-10T08:36:42.832Z","comments":true,"path":"404.html","permalink":"https://sifengjing.github.io/404.html","excerpt":"","text":""},{"title":"分类","date":"2018-04-25T14:34:08.000Z","updated":"2018-11-12T11:29:19.218Z","comments":true,"path":"categories/index.html","permalink":"https://sifengjing.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-04-25T14:34:08.000Z","updated":"2018-11-15T01:22:48.431Z","comments":true,"path":"tags/index.html","permalink":"https://sifengjing.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2024-07-08T02:44:53.667Z","updated":"2019-03-01T03:44:05.116Z","comments":true,"path":"about/index.html","permalink":"https://sifengjing.github.io/about/index.html","excerpt":"","text":"个人简史 个人简介 小子不才，关中人士也，姓司，名锋静，生于壬申年,于世虚度二十六载。吾之双亲，操劳半世，身体康健，家之大幸。吾乃家中独子，性温和，幽默，老成持重，诚以待人。虽貌不及徐公，才不及孔明，然好读中外古籍，尤好运动，吾性情中人者，为人仗义，喜交天下才俊佳人也。 生活感悟 生活中也许做的事情暂时看不到成果，但是不要害怕，你不是没有成长，而是在扎根，别担心，你所有的付出，都有意义，人生没有白吃的苦，你吃过的苦都是为将来的幸福打下基础，人生没有白走的路，每一步都算数。 人生格言 但行好事，莫问前程；前路有光，初心莫忘。 作者：司徒静峰"}],"posts":[{"title":"hexo换电脑如何恢复上线","slug":"hexo换电脑如何恢复上线","date":"2024-07-11T03:50:23.000Z","updated":"2024-07-12T09:50:15.879Z","comments":true,"path":"2024/07/11/hexo换电脑如何恢复上线/","link":"","permalink":"https://sifengjing.github.io/2024/07/11/hexo换电脑如何恢复上线/","excerpt":"","text":"1.将打包的hexo在本地正常启动正常启动后访问：http://localhost:40001234hexo clean ##清理缓存hexo g ##生成静态文件hexo s ##启动项目hexo d ##上传GitHub 2.node.js安装适用hexo的版本具体版本访问hexo官网文档 3.就是将本地正常项目上传到GitHub下载 Git for Windows 地址1. 生成.ssh密钥：可以使用 Git for Windows 提供的 ssh-keygen 工具来生成它们.2. 检查是否已有 SSH 密钥：1ls -al ~/.ssh 如果看到 id_rsa 和 id_rsa.pub，那么您已经有了 SSH 密钥。3. 将公钥添加到 GitHub 登录到您的 GitHub 账户。 点击右上角的用户头像，选择 “Settings”（设置）。 在侧边栏中点击 “SSH and GPG keys”（SSH 和 GPG 密钥）。 点击 “New SSH key”（新建 SSH 密钥）按钮。 在 “Title”（标题）字段中，输入一个描述性名称，例如 “My Windows PC”。 在 “Key”（密钥）字段中，粘贴您刚才复制的公钥内容。 点击 “Add SSH key”（添加 SSH 密钥）按钮。 4. 在 Git Bash 中，使用以下命令测试与 GitHub 的 SSH 连接：1ssh -T git@github.com 如果连接成功，您应该会看到一条欢迎消息。 5. 本地和GitHub通过ssh连接成功后，就可以执行第一步的四个命令，上传hexo的静态文件 创建后默认自动启用 HTTPS，博客地址为：https://用户名.github.io","categories":[{"name":"-hexo","slug":"hexo","permalink":"https://sifengjing.github.io/categories/hexo/"}],"tags":[{"name":"-经验总结 -建站经验","slug":"经验总结-建站经验","permalink":"https://sifengjing.github.io/tags/经验总结-建站经验/"}]},{"title":"wamp服务器让局域网用户访问，403forbidden","slug":"wamp服务器让局域网用户访问,403forbidden解决办法","date":"2019-03-01T03:50:23.000Z","updated":"2019-03-01T09:58:41.695Z","comments":true,"path":"2019/03/01/wamp服务器让局域网用户访问,403forbidden解决办法/","link":"","permalink":"https://sifengjing.github.io/2019/03/01/wamp服务器让局域网用户访问,403forbidden解决办法/","excerpt":"","text":"1.httpd.conf文件，搜索关键字：onlineoffline tag - don’t remove，将 Require local 修改成 Require all granted； 2.httpd-Vhosts.conf 文件，同样将Require local 修改成 Require all granted；（这个是大多数博客没有写的） 3.重启Apache； 4.重点！重点！重点！ 关闭防火墙.","categories":[{"name":"-服务器","slug":"服务器","permalink":"https://sifengjing.github.io/categories/服务器/"}],"tags":[{"name":"-经验总结 -建站经验 -WAMP集成环境","slug":"经验总结-建站经验-WAMP集成环境","permalink":"https://sifengjing.github.io/tags/经验总结-建站经验-WAMP集成环境/"}]},{"title":"炫酷的Canvas粒子特效","slug":"炫酷的Canvas粒子特效","date":"2018-12-12T03:03:45.000Z","updated":"2018-12-12T03:05:47.647Z","comments":true,"path":"2018/12/12/炫酷的Canvas粒子特效/","link":"","permalink":"https://sifengjing.github.io/2018/12/12/炫酷的Canvas粒子特效/","excerpt":"","text":"随着html5Canvas元素的推出呢，现在的浏览器具备了更强大的绘制图像的功能，甚至canvas已经可以用来制作大型网页游戏，关于Canvas的js库也越来越多，有动画库还有图表库比如Echart等等。今天我就要给大家推荐两款非常炫酷的Canvas粒子特效，let’s hit the road! Particleground粒子背景articleground是一款时髦的jquery粒子系统背景插件，PC端可通过鼠标控制视差效果，而移动端可用重力感应控制，Particleground可以运行在任何支持html5 canvas的浏览器上。 大家可以先看看效果。 怎么样是不是很炫酷！！那么要使用这个特效也是非常的简单。 首先放上项目的github地址。把代码clone下来到本地。然后引入它。12&lt;script type='text/javascript' src='jquery-3.0.0.min.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='jquery.particleground.min.js'&gt;&lt;/script&gt; 注意这个组件是基于jQuery的，所以在你也需要引入JQuery文件。 然后在html里面添加一个Canvas容器：1&lt;div id=\"particles\"&gt;&lt;/div&gt; 最后在js中将它初始化：1$('#particles').particleground(); 这样你的设置就完成了 当然你也可以设置参数：1234$('#particles').particleground(&#123;dotColor: '#ff0000', // 点的颜色lineColor: '#ff0000' // 线的颜色&#125;); 更多具体的参数请参阅官方文档。 canvas-nest.js粒子背景接下来是另一款粒子背景，它和上面的 Particleground 有些不一样，粒子并不是随机分散的而是聚集在鼠标的周围，这样可以很清除的反应鼠标的位置。 在这里查看背景预览。 使用这款组件非常的容易，只需要在你的页面中加入这段代码即可（注意要放在body里面）1&lt;script src=\"//cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.min.js\"&gt;&lt;/script&gt; 是不是异常的简单！！ 当然你也可以下载文件到本地，这里是项目的地址。 同样的你可以设置动画参数，只需要在script标签里面添加就行了，像这样：1&lt;script type=\"text/javascript\" color=\"0,0,255\" opacity='0.7' zIndex=\"-2\" count=\"99\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.min.js\"&gt;&lt;/script&gt; 上面的参数分别是线条颜色、线条透明度、z轴值、以及粒子个数。 更多的参数请参阅项目文档。 要提醒一点的是，不管你使用哪个组件，不要将粒子的数量设置得太多，这样浏览器的性能会跟不上，毕竟图像绘制还是很吃性能的，浏览器甚至还会崩溃卡死。 好了，就介绍到这里了，祝各位小伙伴玩得愉快哦。 作者：司徒静峰","categories":[{"name":"HTML5","slug":"HTML5","permalink":"https://sifengjing.github.io/categories/HTML5/"}],"tags":[{"name":"经验总结","slug":"经验总结","permalink":"https://sifengjing.github.io/tags/经验总结/"},{"name":"Canvas","slug":"Canvas","permalink":"https://sifengjing.github.io/tags/Canvas/"}]},{"title":"用canvas制作一个简单的随机验证码","slug":"用canvas制作一个简单的随机验证码","date":"2018-12-12T02:56:37.000Z","updated":"2018-12-12T03:01:45.302Z","comments":true,"path":"2018/12/12/用canvas制作一个简单的随机验证码/","link":"","permalink":"https://sifengjing.github.io/2018/12/12/用canvas制作一个简单的随机验证码/","excerpt":"现在验证码在网页表单中几乎是标配，用来防止机器人攻击网站，今天我们就用canvas和js来写一个简单的随机二维码。","text":"现在验证码在网页表单中几乎是标配，用来防止机器人攻击网站，今天我们就用canvas和js来写一个简单的随机二维码。 制作思路大家知道canvas是HTML5里面的新特性，可以用来绘图，配合js可以绘制出各种各样的图案。验证码一般由数字或字母组成，再加上一些视觉干扰的元素，防止机器人识别。而canvas可以绘制文字及线条，还可以做一些旋转处理，利用这些特性我们就可以做出一个简单的随机验证码。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;canvas width=\"200\" height=\"30\" id=\"myCanvas\"&gt;&lt;/canvas&gt; &lt;br&gt; &lt;input type=\"text\" name=\"\" placeholder=\"请输入验证码\" id=\"input\"&gt; &lt;button onclick=\"check()\"&gt;验证&lt;/button&gt;&lt;/body&gt;&lt;script type=\"text/javascript\"&gt; var c=document.getElementById(\"myCanvas\"); var ctx=c.getContext(\"2d\"); ctx.fillStyle=\"#BFEFFF\";//绘制背景颜色 ctx.fillRect(0,0,160,30); //随机产生4个字符 var chars = []; for(var i = 0;i &lt; 4;i++)&#123; chars.push(Math.floor(Math.random()*9).toString()); &#125; ctx.font=\"20px Verdana\"; var x = 15; var colors = ['red','yellow','blue','green','pink','black']; //绘制4个字符 for(i = 0;i &lt; 4;i++)&#123; ctx.fillStyle = colors[Math.floor(Math.random()*5)]; ctx.fillText(chars[i],x,25); x = x + 40; &#125; //对图案随机加入线条造成干扰 var lineNumber = 5; // 线条条数 var lineX = 160; var lineY = 30; // 最大线条坐标 for(i = 0;i &lt; lineNumber;i++)&#123; ctx.strokeStyle = colors[Math.floor(Math.random()*5)]; ctx.beginPath(); ctx.moveTo(Math.floor(Math.random()*lineX),Math.floor(Math.random()*lineY)); ctx.lineTo(Math.floor(Math.random()*lineX),Math.floor(Math.random()*lineY)); ctx.stroke(); &#125; // 点击按钮验证 function check()&#123; var input = document.getElementById('input').value; if(input === chars.join(''))&#123; alert(\"验证成功\"); &#125; else&#123; alert('验证失败'); &#125; &#125;&lt;/script&gt;&lt;/html&gt; 最后的效果：（每一次刷新后的图案都是随机的） 当然这里使用的是数字，你也可使用字母或数字字母混用。在干扰方面，你还可以加上旋转，缩放，虚化等等，这些效果用canvas同样可以实现。 以上。 作者：司徒静峰","categories":[{"name":"HTML5","slug":"HTML5","permalink":"https://sifengjing.github.io/categories/HTML5/"}],"tags":[{"name":"经验总结","slug":"经验总结","permalink":"https://sifengjing.github.io/tags/经验总结/"},{"name":"canvas","slug":"canvas","permalink":"https://sifengjing.github.io/tags/canvas/"}]},{"title":"如何解决前后端分离开发时的跨域问题","slug":"如何解决前后端分离开发时的跨域问题","date":"2018-12-12T02:49:04.000Z","updated":"2018-12-12T02:50:30.210Z","comments":true,"path":"2018/12/12/如何解决前后端分离开发时的跨域问题/","link":"","permalink":"https://sifengjing.github.io/2018/12/12/如何解决前后端分离开发时的跨域问题/","excerpt":"最近在和小伙伴一起写一个项目，采用的是前后端分离开发，前后台的交流均通过ajax。但是我俩是在各自的电脑上开发各自的部分，所以两台电脑处于不同的域中，前台在请求后台接口时会发生跨域的问题，那么这个问题如何解决呢？","text":"最近在和小伙伴一起写一个项目，采用的是前后端分离开发，前后台的交流均通过ajax。但是我俩是在各自的电脑上开发各自的部分，所以两台电脑处于不同的域中，前台在请求后台接口时会发生跨域的问题，那么这个问题如何解决呢？ 前台部分在前台的ajax请求中需要允许跨域，我使用的是jQuery的ajax函数，具体的设置如下：12345678910111213141516jQuery.ajax(&#123; url : url, data: data, type : 'POST', xhrFields: &#123; withCredentials: true &#125;, dataType:\"json\", crossDomain: true, success:function (result) &#123; // 请求成功后的操作 &#125;, error:function () &#123; // 请求失败后的操作 &#125; &#125;); 后台部分跨域问题最重要的还是后台部分，后台需要允许来自于其他域的请求，以下是php的解决方案：123header(\"Access-Control-Allow-Credentials: true\"); // 允许跨域访问header(\"Access-Control-Allow-Origin:123.123.123.123\"); //允许来自123.123.123.123的ip地址提交访问header(\"Access-Control-Allow-Origin:*\"); //允许任何地址的访问 其他语言的解决方案大同小异，主要就是在返回头中写上允许跨域访问的域名或IP就行，建议不要使用通配符 * ，这样对服务器来讲并不安全，尽管是在开发过程中。 在前后台分离的开发过程中还有很多坑，需要我们一个一个去解决，特别是前后台数据交流的部分是很值得多思考的。现在前后台分离开发的模式在越来越多的项目中使用，早早熟悉有利于以后的职业生涯。以后还发现什么坑也会贴上来的(๑•̀ㅂ•́)و✧。 最后推荐一本书，json必知必会，json是前后端交流的信使，熟悉它的用法和应用自然非常重要，最后祝大家学习愉快︿(￣︶￣)︿。 作者：司徒静峰","categories":[{"name":"跨域","slug":"跨域","permalink":"https://sifengjing.github.io/categories/跨域/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://sifengjing.github.io/tags/jQuery/"},{"name":"ajax","slug":"ajax","permalink":"https://sifengjing.github.io/tags/ajax/"}]},{"title":"你不知道的JSON","slug":"你不知道的JSON","date":"2018-12-12T02:46:21.000Z","updated":"2018-12-12T02:56:02.034Z","comments":true,"path":"2018/12/12/你不知道的JSON/","link":"","permalink":"https://sifengjing.github.io/2018/12/12/你不知道的JSON/","excerpt":"","text":"JSON的历史Douglas Crockford 是JSON的创造者，也是JavaScript：the good part的作者。 JSON（JavaScript Object Notation）是一种由Douglas Crockford 构想和设计、轻量级的数据交换语言，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是JavaScript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。 JSON格式是1999年《JavaScript Programming Language, Standard ECMA-262 3rd Edition》的子集合，所以可以在JavaScript以eval()函数（javascript通过eval（）调用解析器）读入。不过这并不代表JSON无法使用于其他语言，事实上几乎所有与网页开发相关的语言都有JSON函数库。 JSON是Douglas Crockford在2001年开始推广使用的数据格式，在2005年-2006年正式成为主流的数据格式，雅虎和谷歌就在那时候开始广泛地使用JSON格式。 什么是JSON（ JavaScript Object Notation） JSON是一种数据交换格式。 JSON独立于编程语言。 JSON不局限于某项技术，本身非私有，且可移植。对于产生（序列化）和读取（反序列化）JSON 数据，所有的现代编程语言（Java、JavaScript、Ruby、C#、PHP、Python、Groovy等）和平台都提供了良好的支持。 可以说，我们使用的是一种基于对象表示法的数据交换格式，JSON 表达数据的方式对通用的编程概念都很友好。 为什么使用JSON： 基于 JSON 的 RESTful API 的爆发式增长 JSON 基本数据结构的简洁性 JSON 非常简洁，并且正在逐步替代 XML 成为互联网上主要的数据交换格式。它易于阅读，相关结构也很容易与软件开发人员所熟悉的概念对应起来，精简的数据类型也便于程序员理解，如数组、对象和名称 - 值对。 由于节省了每个数据元素的开始标签与结束标签，JSON 格式的额外开销更少、更为紧凑，所以JSON 格式的文档一般比内容相同的 XML 文档小。从企业级应用的角度来看，与 XML 相比，JSON 文档在网络上的传输与处理更快，因此效率更高。 如今 JSON 在配置文件领域也占有一席之地。后面会将与其他配置文件的区别。 JSON语法JSON包含3种核心数据类型： 名称-值对：由一个名称（数据属性）和一个值组成。 对象：名称 - 值对的无序集合。 数组：值的有序集合。 键始终被双引号包围，当值是字符串时，必须使用双引号。 JSON 中的名称 - 值对是一种对许多系统都十分友好的数据结构，而使用空格和特殊字符（即 a-z、0-9 除外的其他字符）忽略了可移植性。我们在第 1 章中将这一专业术语定义为“以一种双方系统都兼容的方式在平台间传递信息”。如果我们这么做的话，会直接降低 JSON 数据的可移植性；因此我们说，为了获得最大可移植性，应尽可能避免使用空格或特殊字符。 JSON 中的名称 - 值对的名称如果被系统作为对象装入内存的话，将会成为“属性”。在部分系统中，属性名可以包含下划线（ _ ）或数字，但是大多数情况下最好是使用英文字母 A~Z 或 a~z，在含有多个单词时，最好使用驼峰表示法。 例子：”Lindsay’s animal”:”cat” JSON数据类型JSON中的数据类型： 在字符串中需要转义的字符： 双引号 反斜杠 \\/ （正斜线） \\b （退格符） \\f （换页符） \\t （制表符） \\n （换行符） \\r （回车符） \\u 后面跟十六进制字符（如笑脸表情 \\u263A ） JSON中的数字 数字 整型 浮点数 定点数 —— 计算机中采用的一种数的表示方法。参与运算的数的小数点位置固定不变 。 数字需要注意： 数值永远是十进制数（只能出现数字 0~9），不能以 0 开头。 数值可以存在由小数点（ . ）开头的小数部分。 数值可以是以 10 为底的指数，该指数由 e 或 E 来表示，其后跟正号表示正指数幂，跟负号则表示负指数幂。 数值不支持八进制数和十六进制数。 与 JavaScript 不同，数值不能是 NaN（Not a Number，用于表示非法数值），也不能是Infinity 没有注释一言以蔽之，JSON 中没有注释。 根据 Crockford 在 Yahoo! JSON group 和 Google+ 上的说法，JSON 最开始是允许出现注释的，但之后不久就因为以下原因移除了注释。 Crockford 认为注释没有什么用处。 JSON 解析器在支持注释方面存在困难。 出现了滥用注释的情况。Crockford 发现有些注释被用于解析指令，而这会彻底摧毁JSON 的互操作性。 移除注释有利于 JSON 实现跨平台性，简化这方面的支持工作。 没有注释意味着我们需要更语义化的命名，或者给要描述的对象添加一个描述字段。没有注释是JSON的一个相对于有注释数据格式在可读性方面的一个劣势。 JSON风格指南google的一份风格指南。 选择有意义的属性名 属性名应该是具有定义语义的有意义的名称。 属性名必须是驼峰式的，ASCII码字符串。 首字符必须是字母，下划线(_)或美元符号($)。 随后的其他字符可以是字母，数字，下划线(_)或美元符号($)。 应该避免使用Javascript中的保留关键字(下文附有Javascript保留字清单) 数组类型应该是复数属性名。其它属性名都应该是单数。 数组通常包含多个条目，复数属性名就反映了这点。在下面这个保留名称中可以看到例子。属性名items是复数因为它描述的是一组对象。大多数的其它字段是单数。 考虑移除空或null值 如果一个属性是可选的或者包含空值或null值，考虑从JSON中去掉该属性，除非它的存在有很强的语义原因。 枚举值应当以字符串的形式呈现 随着APIs的发展，枚举值可能被添加，移除或者改变。将枚举值当作字符串可以使下游用户幽雅地处理枚举值的变更。 通过选择新的属性名或将API版本化来避免命名冲突 新的属性可在将来被添加进保留列表中。JSON中不存在命名空间。如果存在命名冲突，可通过选择新的属性名或者版本化来解决这个问题。 JavaScript保留字应该避免在属性名中使用 JSON结构和保留属性名https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md#json%E7%BB%93%E6%9E%84%E5%92%8C%E4%BF%9D%E7%95%99%E5%B1%9E%E6%80%A7%E5%90%8D 其他特性 语法验证。 工具：JSON Formatter &amp; Validator 可视化工具，会展示树形结构。 [JSON Editor Online](http://www.jsoneditoronline.org/) [JSONLint](http://jsonlint.com/) 以上这些都是语法验证工具。我们会在之后讨论另一种类型的验证——一致性验证。语法验证关注的是 JSON 的格式，而一致性验证关注的是其独特的数据结构。 JSON的媒体格式 JSON 的 MIME 类型是 application/json 。 序列化和反序列化。 JSON从2009年的 ECMAScript 5 标准开始成为 JavaScript 原生类库的一部分。 在之前使用eval()这个函数来执行序列化。 使用 JSON.stringify() 和 JSON.parse() 进行 JavaScript 中的序列化 / 反序列化操作。 其他的语言也有序列化和反序列化的库。 JSON作为配置文件选择配置文件的考量：可读性，方便被编程语言/框架解析。 软件中经常会有配置文件或设置文件，它让我们可以不必重新编译就能修改设置。配置文件的格式有很多，有 INI ，yuml和 XML 等。 yuml和XML都是有注释的。 yuml除了支持JSON中的数据类型，还支持时间和日期这两种数据类型，相对于JSON，yaml的语法规则要稍微复杂一些，对于初学者来说，没有JSON那么好上手。 XML 能够包含更为复杂的数据，但是它不像 JSON 一样具有数据类型。 JSON和XML还有另外一个很大的区别在于有效数据率。JSON作为数据包格式传输的时候具有更高的效率，这是因为JSON不像XML那样需要有严格的闭合标签，这就让有效数据量与总数据包比大大提升，从而减少同等数据流量的情况下，网络的传输压力 除了这些数据格式本身具有的优缺点外，是否能够很方便地被编程语言 / 框架解析也是一个很重要的考量因素。如果 JSON 解析器已经在你的应用中深度使用了，那么 JSON 可能是你配置文件的最佳选择。 JSON Schema 对数据进行验证（重点）语义校验JSON Schema官网：http://json-schema.org/ JSON Schema is a vocabulary that allows you to annotate and validate JSON documents. JSON Schema是一个词汇表，允许您注释和验证JSON文档。它也是一个JSON文件，本身遵守JSON规范。 json-schema 的用途越来越广泛，除了定义数据结构外，我们还可以使用 json-schema 验证数据格式和生成随机数据 。 它可以验证的内容有： 值的数据类型是否正确？ 可以具体规定一个值是数字、字符串等类型。 是否包含所需要的数据？ 可以具体规定哪些数据是需要的，哪些是不需要的。 值的形式是不是我需要的？ 可以指定范围、最小值和最大值。 编写工具：https://jsonschema.net/ 如何使用Schema首先，需要在 JSON 第一个名称 - 值对中，声明其为一个 schema 文件。 第二个名称 - 值对应该是 JSON Schema 文件的标题. 在 JSON Schema 文件的第三个名称值对中，要定义需要在 JSON 中包含的属性。 为了在 JSON Schema 中实现这一逻辑，需要在 “$schema” 、 “title” 和”properties” 后面加上第四个名称 - 值对，它的名称是 “required” ，值为一个数组。数组中包含必填的字段。 非常重要的一点是，如果你的 JSON Schema 中不包含 “required” 名称 - 值对，那么将不会有必填项。一个没有任何名称 - 值对的空 JSON 对象也被认为是合法的。 本章提供的例子只是简介，是冰山一角。JSON Schema 还支持正则表达式（一种字符形式，比如电子邮件地址的格式）以及枚举类型（一个包含所有可能值的列表）。 用schema校验JSONAJV号称是最快的JSON Schema验证器，我们看一下它的官网：可以看到这个下载次数非常高，说明使用的是非常广泛的。 我们还可以看到它的性能表现，这里号称是比第二名快50%。 它的特性：它支持04，06，07的草案标准，并且支持浏览器和nodejs，可以说是比较全面的验证器了。 工具现在我要推荐一些工具给大家。 刚刚看了schema的语法，因为schema也是JSON文件，所以写起来还是比较麻烦的，特别是你的数据稍稍复杂一点就很费时间。这里推荐一个非常方便的一个工具：JSONSchema.net。你只需要填入你的示例数据，然后这个工具就会识别并自动生成schema，当然它做不到完全准确，它只能帮你完成70%的工作，还需要你去检查和完善，不过已经可以帮我们省下很多力气了。 接下来是生成测试数据，JSON-generator可以帮你生成你想要的测试数据，它提供一些工具函数来帮助你模拟出一些你想要的数据。 接下来要介绍一个非常好用的工具：JSON-server，来看一下的官网。 它的使用非常简单，也支持很多种动作。可以做过滤，分页，简单的排序啊，数据的切片啊等等功能，对于辅助我们平常的开发什么的还是够用的，这三个工具加在一起可以帮助我们提高很多效率哈。 在JSON中进行搜索主要是给大家推荐几个工具，它们的使用方法都非常相似哈，这里以JSONPath为例介绍一下： JSONPath JSONPointer jq 通过这张表我们可以看到它的查询能力还是比较全面的。 JSON与mysql从MySQL 5.7.8 开始，MySQL支持原生的JSON格式，即有独立的json类型，用于存放 json格式的数据。 MySQL对支持JSON的做法是，在server层提供了一堆便于操作JSON的函数，至于存储，就是简单地将JSON编码成BLOB(binary large object)，二进制大对象 ，然后交由存储引擎层进行处理，也就是说，MySQL 5.7的JSON支持与存储引擎没有关系，MyISAM 存储引擎也支持JSON 格式。 JSON 格式的数据并不是以string格式存储于数据库而是以内部的binary 格式，以便于快速的定位到json 格式中值 在插入和更新操作时MySQL会对JSON 类型做校验，已检查数据是否符合json格式，如果不符合则报错。 MySQL支持JSON以后，总是避免不了拿来与MongoDB进行一些比较。但是，MySQL对JSON的支持，至少有两点能够完胜MongoDB： 可以混合存储结构化数据和非结构化数据，同时拥有关系型数据库和非关系型数据库的优点 能够提供完整的事务支持 JSON与NoSQLCouchDB使用 JSON 文档存储数据的文档存储数据库——CouchDB。 无缝多主同步，可从大数据扩展到移动，具有直观的HTTP / JSON API，专为可靠性而设计。couchDB也可以作为一个数据库服务器来使用。 CouchDB（http://couchdb.apache.org/）是一种使用 JSON 文档存储数据的NoSQL 数据库。 Apache CouchDB是一个开源数据库，专注于易用性和成为”完全拥抱web的数据库”[1]。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。其中一个显著的功能就是多主复制。CouchDB的第一个版本发布在2005年，在2008年成为了Apache的项目。 不同于关系型数据库，CouchDB没有将数据和关系存储在表格里。替代的，每个数据库是一个独立的文档集合。每一个文档维护其自己独立的数据和自包涵的schema。一个应用程序可能会访问多个数据库，比如其中一个位于用户的手机上，另一个位于在远程的服务器上。文档的元数据包含版本信息，让其能够合并可能因为数据库链接丢失导致的任何差异。 由于 CouchDB 使用文档来存储数据，因此当从数据库中查询一个账户时，得到的直接就是一个结构化的文档。没有必要进行重组。这样既高效又方便。 CouchDB 的另一个好处是有利于数据的变化。有些数据会随着时间而发生变化。当数据发生变化时，CouchDB无需修改表的结构。 MongoDBMongoDB 是一种 NoSQL 数据库，允许开发人员以文档的形式存储数据。 MongoDB是一个文档数据库，具有您需要的可查询性和索引所需的可伸缩性和灵活性。 关于BSON（Binary JSON，BSON） BSON 是 MongoDB 内部用于序列化 JSON 文档的一种二进制数据格式。 bson对json做了一些对存储上的优化。 json和bson的区别： 更快的遍历速度 对json格式来说，太大的json结构会导致数据遍历非常慢。在json中，要跳过一个文档进行数据读取，需要对此文档进行扫描才行，需要进行麻烦的数据结构匹配，比如括号的匹配。而bson对json的一大改进就是，它会将json的每一个元素的长度存在元素的头部，这样你只需要读取到元素长度就能直接seek到指定的点上进行读取了。 操作更简易 对json来说，数据存储是无类型的，比如你要修改基本一个值，从9到10，由于从一个字符变成了两个，所以可能其后面的所有内容都需要往后移一位才可以。 而使用bson，你可以指定这个列为数字列，那么无论数字从9长到10还是100，我们都只是在存储数字的那一位上进行修改，不会导致数据总长变大。 当然，在mongoDB中，如果数字从整形增大到长整型，还是会导致数据总长变大的。 增加了额外的数据类型 json是一个很方便的数据交换格式，但是其类型比较有限。bson在其基础上增加了“byte array”数据类型。这使得二进制的存储不再需要先base64转换后再存成json，大大减少了计算开销和数据大小。当然，在有的时候，bson相对json来说也并没有空间上的优势，比如对{“field”:7}，在json的存储上7只使用了一个字节，而如果用bson，那就是至少4个字节（32位） 关于Schema MongoDB 是没有 Schema 的，这意味着数据库既不会校验数据，也不会在存储数据时依赖Schema。然而，应用程序对存储在每个文档中的数据还是会有数据结构上的预期，因为只有这样，应用程序才能放心地使用集合与文档。 从MongoDB3.2开始，提供validator来对数据进行验证。 在创建集合的时候指定一个验证器像这样。 这个验证器也有自己的规范，这里就不一一介绍了 MessagePackjson作为数据交换格式，现在使用得越来越广泛，但是它还是有不少的弊端，MessagePack也是一个数据交换格式，它对针对JSON的一些问题做了一些优化。 图上这个json长度为27字节，但是为了表示这个数据结构，它用了9个字节（就是那些大括号、引号、冒号之类的，他们是白白多出来的）来表示那些额外添加的无意义数据。msgpack的优化在图上展示的也比较清楚了，省去了特殊符号，用特定编码对各种类型进行定义，比如上图的A7，其中前四个bit A就是表示str的编码，而且它表示这个str的长度只用半个字节就可以表示了，也就是后面的7，因此A7的意思就是表示后面是一个7字节长度的string。 但是这个格式的可读性和可编辑性就比较差了。 核心压缩方式可参看官方说明messagepack specification 概括来讲就是: true、false 之类的：这些太简单了，直接给1个字节，（0xc3 表示true，0xc2表示false） 不用表示长度的：就是数字之类的，他们天然是定长的，是用一个字节表示后面的内容是什么，比如用（0xcc 表示这后面，是个uint 8，用oxcd表示后面是个uint 16，用 0xca 表示后面的是个float 32)。对于数字做了进一步的压缩处理，根据大小选择用更少的字节进行存储，比如一个长度&lt;256的int，完全可以用一个字节表示。 不定长的：比如字符串、数组、二进制数据（bin类型），类型后面加 1~4个字节，用来存字符串的长度，如果是字符串长度是256以内的，只需要1个字节，MessagePack能存的最长的字符串，是(2^32 -1 ) 最长的4G的字符串大小。 高级结构：MAP结构，就是k-v 结构的数据，和数组差不多，加1~4个字节表示后面有多少个项 Ext结构：表示特定的小单元数据。也就是用户自定义数据结构。 protocol bufferGoogle Protocol Buffers 简称 Protobuf，它提供了一种灵活、高效、自动序列化结构数据的机制，可以联想 XML，但是比 XML 更小、更快、更简单。仅需要自定义一次你所需的数据格式，然后用户就可以使用 Protobuf 编译器自动生成各种语言的源码，方便的读写用户自定义的格式化的数据。与语言无关，与平台无关，还可以在不破坏原数据格式的基础上，依据老的数据格式，更新现有的数据格式。 Protobuf 的特点简单总结如下几点： 作用与 XML、json 类似，但它是二进制格式，性能好、效率高 代码生成机制，易于使用 解析速度快 支持多种语言 向后兼容、向前兼容 缺点：可读性差 目前，Protobuf 提供了两个大版本： 2.x 版本和 3.x 版本。 2.x 版本最新的版本是 2.6.1，支持 C++、Java 和 Python 三种语言的API。 3.x 版本最新的版本是 3.0.0-beta-1，支持 C++、Java、Python、Ruby、JavaNano、Objective-x 和 C# 这几种语言的 API。 作者：司徒静峰","categories":[{"name":"JSON","slug":"JSON","permalink":"https://sifengjing.github.io/categories/JSON/"}],"tags":[{"name":"web开发","slug":"web开发","permalink":"https://sifengjing.github.io/tags/web开发/"}]},{"title":"在sublime中运行JavaScript脚本","slug":"在sublime中运行JavaScript脚本","date":"2018-12-12T02:35:52.000Z","updated":"2018-12-12T02:53:26.792Z","comments":true,"path":"2018/12/12/在sublime中运行JavaScript脚本/","link":"","permalink":"https://sifengjing.github.io/2018/12/12/在sublime中运行JavaScript脚本/","excerpt":"sublime是一款轻量级的文本编辑器，非常受大家的欢迎，它不仅启动迅速，还提供非常丰富的插件供大家扩展功能。对于我个人来讲，我非常喜欢用sublime编写单个的脚本文件。但是前端的小伙伴们知道，如果编写js脚本，要编译运行的话必须在浏览器或者是node中运行，虽然不麻烦，但总归还是会消耗一些时间，对于一些简单的脚本，我们想能够立即看到脚本运行的结果，那么今天我就介绍一个可以直接在sublime中运行js脚本文件的方法。","text":"sublime是一款轻量级的文本编辑器，非常受大家的欢迎，它不仅启动迅速，还提供非常丰富的插件供大家扩展功能。对于我个人来讲，我非常喜欢用sublime编写单个的脚本文件。但是前端的小伙伴们知道，如果编写js脚本，要编译运行的话必须在浏览器或者是node中运行，虽然不麻烦，但总归还是会消耗一些时间，对于一些简单的脚本，我们想能够立即看到脚本运行的结果，那么今天我就介绍一个可以直接在sublime中运行js脚本文件的方法。 下面是详细的步骤： 安装node在node.js的官网下载并安装node.js，请确保你的node已经被添加到了环境变量中（这一步非常简单就不多说了，网上有很多教程请自行查阅）。 添加 build system现在打开你的sublime，然后依次打开 Tools -&gt; Build System -&gt; New Build System，黏贴以下代码：1234&#123; \"cmd\": [\"node\", \"--use-strict\", \"--harmony\", \"$file\"], \"selector\": \"source.js\"&#125; 然后保存，这个时候sublime会自动识别并跳到build system的保存目录，取一个你喜欢的名字，比如JavaScript.sublime-build（这样方便识别），确定保存。 另：上面的代码默认使用的是严格模式，并且支持ES6的新特性，如果你不想使用这些功能，可以使用下面的代码1234&#123; \"cmd\": [\"node\", \"$file\"], \"selector\": \"source.js\"&#125; 开始使用吧！保存好之后打开你的sublime，在tool中选择build system，你就会看到那个刚刚你取名字的编译系统，选择它。 新建一个js文件，写上js代码，比如：123for (let i = 0; i &lt; 3; i++) &#123; console.log('i:', i);&#125; 保存，然后按下ctrl+B，就可以看到运行结果了。 是不是非常的神奇呢！！ 作者：司徒静峰","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sifengjing.github.io/categories/JavaScript/"}],"tags":[{"name":"web开发","slug":"web开发","permalink":"https://sifengjing.github.io/tags/web开发/"},{"name":"经验总结","slug":"经验总结","permalink":"https://sifengjing.github.io/tags/经验总结/"}]},{"title":"高性能JavaScript","slug":"高性能JavaScript","date":"2018-12-12T02:29:03.000Z","updated":"2018-12-12T02:32:10.702Z","comments":true,"path":"2018/12/12/高性能JavaScript/","link":"","permalink":"https://sifengjing.github.io/2018/12/12/高性能JavaScript/","excerpt":"","text":"《高性能JavaScript》笔记第一章 加载和执行脚本位置由于脚本阻塞的存在，建议将所有&lt;script&gt;标签尽可能放到 &lt;body&gt; 标签的底部，以减少对整个页面下载的影响。 组织脚本减少脚本的HTTP请求数量，你可以将脚本合并。文件合并的工作可以通过离线的打包工具或者类似Yahho!combo handler的实时在线服务来实现。 无阻塞的脚本在页面加载完成后再加载JavaScript代码，也就是在window对象的load事件触发后再下载脚本。 延迟的脚本将无需修改DOM的脚本加上async属性，用于异步加载脚本。 动态脚本元素你可以使用DOM对象来动态的加载一个脚本： 12var script = document.createElement(\"script\");script.src = \"file.js\"; 使用动态脚本下载文件时，返回的代码通常会立即执行。如果你要动态加载多个脚本文件，一定要考虑清楚文件的加载顺序。并不是所有的浏览器都会保证以你添加脚本的顺序来执行代码，那取决于服务器的返回时间。 XMLHttpRequest脚本注入也就是通过Ajax来加载脚本文件。这种方法的优点在于你可以下载JavaScript代码但不立即执行。 推荐的无阻塞模式向页面中添加大量JavaScript的推荐做法只需两步： 添加动态加载所需代码。 加载初始化页面所需代码。 123456&lt;script src=\"loader.js\"&gt;&lt;/script&gt;&lt;script&gt; loadScript(\"the-rest.js\",function()&#123; Application.init(); &#125;);&lt;/script&gt; 第二章 数据存取管理作用域要理解速度和作用域的关系，首先要正确地理解作用域的工作原理。 作用域链和标识符解析的性能一个标识符所在的位置越深，它的读写速度就越慢。因此，函数中读写局部变量总是最快的，而读写全局变量总是最慢的。全局变量总是存在于执行作用域链的最末端。 对于有过优化的浏览器，跨作用域访问标识符时并没有类似的性能损失。 在没有优化的浏览器中，建议尽可能使用局部变量。 改变作用域链不要使用 with 来改变作用域链。 动态作用域动态作用域只存在于代码执行过程中，因此无法通过静态分析检查出来。 不推荐使用动态作用域。 闭包，作用域和内存闭包是对作用域的引用，因此在使用闭包时，可能会造成性能问题。在脚本编程中，最好小心的使用闭包，它同时关系到内存和执行速度。 原型链与嵌套成员属性或方法在原型链中的位置越深，访问它的速度就越慢。 尽量避免在同一个函数中多次查找同一个对象，除非它的值改变了。 第三章 DOM编程用脚本进行DOM操作的代价很昂贵，它是富应用中常见的性能瓶颈。 DOM访问与修改访问DOM的次数越多，代码的运行速度越慢。因此，应该减少访问DOM的次数，把运算尽量留在ECMAScript这一端进行。 HTML集合HTML集合一直与文档保持着连接，每次你需要最新的信息时，都会重复执行查询的过程。这正是低效之源。 你可以将HTML集合存储在局部变量中，这样可以减少引擎对HTML的读取。 遍历DOM使用浏览器提供的API来过滤文本节点会更高效。 如果要处理大量组合查询，使用 querySelectorAll() 更有效率。 重绘与重排当元素的几何属性改变时，会引起浏览器的重排与重绘，重排和重绘都是代价昂贵的操作，它们会导致WEB应用程序的UI反应迟钝。所以，应该尽可能减少这类过程的发生。 重排何时发生： 添加或删除可见的DOM元素。 元素位置改变。 元素尺寸改变。 内容改变。 页面渲染器初始化 浏览器窗口尺寸改变 为了减少重绘及重排的发生次数，你可以： 合并多次对DOM和样式的修改 批量修改DOM 事件委托使用事件委托来减少事件处理器的数量，可以显著提高性能。 第四章 算法和流程控制循环forEach() 等函数迭代方法尽管被支持也非常便利，但它仍然比基于循环的迭代要慢一些。如果你的程序有性能要求，基于函数的迭代不是很合适的选择。 条件语句优化 if-else ： 最简单的方法是将最可能出现的条件放在首位，这样可以避免很多不必要的判断。 还可以将多个判断分组，减轻条件判断的负担。 查找表：当大量离散值需要测试时，可以使用数组和普通对象来构建查找表，这样可以提高数据访问速度。 12var results = [result1,result2,result3,result4,result5,result6,······];return results[value]; 当单个键和单个值之间存在逻辑映射时，查找表的优势便能体现出来。 递归浏览器拥有固定数量的调用栈限制，当你使用了太多的递归超过最大调用栈容量时，浏览器将会报错。 迭代任何使用递归实现的算法同样可以使用迭代来实现。使用优化后的循环替代长时间运行的递归函数可以提升性能，因为运行一个循环比反复调用一个函数的开销要少得多。 第五章 字符串和正则表达式提高正则表达式效率的方法： 正则表达式以简单，必须的字元开始。起始标记最好为一个锚，特定字符串，字符类，和单词边界。 使用量词模式，使它们后面的字元互斥。 减少分支数量，减少分支范围。 使用非捕获组。 只捕获感兴趣的文本以减少后处理。 暴露必需的字元。 使用适合的量词。 把正则表达式赋值给变量并重用它们。 将复杂的正则表达式拆分 第六章 快速响应的UI界面在你的web应用中限制高频率重复定时器的数量。 Web Workers是浏览器支持的特性,它允许你在UI线程外部执行JavaScript代码，从而避免锁定UI。 你可以用Web Worker来： 编/解码大字符串 复杂数学运算 大数组排序 第七章 AJAX通过缓存数据来提高减少请求数量，选择合适的数据介质来提高你的数据解析速度。 你应该知道如何使用成熟的Ajax类库，以及何时编写自己的底层Ajax代码。 第八章 编程实践使用Obejct/Array直接量直接量比使用对象更快： 123var array1 = [];// 上面的代码比下面的运行得更快var array2 = new Array(); 位操作JavaScript的位运算的速度其实是非常快的，你可以尽管用它来做一些必要的运算。 原生方法无论你的JavaScript代码如何优化，都永远不会比JavaScript引擎提供的原生方法更快。当有原生方法可用时，尽量使用它们。特别是数学运算和DOM操作。 第九章 构建并部署高性能JavaScript应用合并多个JavaScript文件将多个JavaScript文件合并为一个文件以减少HTTP请求数。 预处理JavaScript文件预处理你的JavaScript源文件并不会让应用变得更快，但它允许你做些其他事情，例如有条件地插入测试代码，来衡量你的应用程序的性能。 JavaScrip压缩JavaScript压缩是指把JavaScript文件中所有与运行无关的部分进行剥离的过程。剥离的内容包括注释和不必要的空白字符。 JavaScript的HTTP压缩当Web浏览器请求一个资源时，它通常会发送一个HTTP头来告诉服务器它支持哪种编码类型，这个信息主要用来压缩文件以获得更快的下载。 Accept-Eecoding通常包括gzip，compress,deflate,identiry。 使用内容分发网络（CDN）CDN通过向地理位置最近的用户传输内容，极大的减少网络延时。 你可以自建CDN或者使用第三方CDN服务。 第十章 工具性能分析工具：YUI Profiler 网站性能检测工具：Page Speed HTTP代理调试工具：Fibbler 工具的作用： 使用网络分析工具找出加载脚本和页面中其他资源的瓶颈，这会帮助你决定哪些脚本需要延迟加载，或者需要进一步分析。 尽管传统的经验告诉我们要减少HTTP请求数，但把脚本尽可能延迟加载可以加快页面的渲染速度，给用户带来更好的体验。 使用性能分析工具找出脚本运行过程中速度慢的地方，检查每个函数所消耗的时间，以及函数被调用的次数，通过调用栈自身提供的一些线索来找出需要集中精力优化的地方。 作者：司徒静峰","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://sifengjing.github.io/categories/JavaScript/"}],"tags":[{"name":"web开发","slug":"web开发","permalink":"https://sifengjing.github.io/tags/web开发/"}]},{"title":"流行语遇见文言文","slug":"流行语遇见文言文","date":"2018-12-11T03:45:01.000Z","updated":"2018-12-11T08:36:17.570Z","comments":true,"path":"2018/12/11/流行语遇见文言文/","link":"","permalink":"https://sifengjing.github.io/2018/12/11/流行语遇见文言文/","excerpt":"","text":"现在的流行语翻译成文言文是什么感觉？下方高能，不要太惊艳！ 文言文： 我只想安静的做个美男子。翻译：尘世三千繁华，我且与酒拜桃花。任尔金玉琳琅良驹成双，不敌我眉间红豆朱砂。 我书读的少，你可别骗我。翻译：君莫欺我不识字，人间安得有此事。 鬼知道我经历了什么。翻译：阳世之人，未解吾之千千劫也。 生活不止眼前的苟且，还有诗和远方。翻译：常抱青云之志，莫但求田问舍。 感觉身体被掏空。翻译：叹吾躯，已淘虚。 我已经使出了洪荒之力。翻译：太古滔滔之气，一泄如此。 长的丑的都睡着了，长得帅的还醒着。翻译：玉树临风前，驴骡正酣睡。 认真你就输了。翻译：石火光中争何事，蜗牛角上莫认真。 重要的事情说三遍。翻译：念之再三，铭之肺腑。 其实我的内心是崩溃的。翻译：方寸淆乱，灵台崩摧。 你们城里人真会玩。翻译：都邑之民，何其善戏。 吓死宝宝了。翻译：妙哉此言，足堪唬弄婴孩。 我单方面宣布和谁谁谁结婚。翻译：愿出一家之言，以结两姓之好。 人要是没有点理想，那和咸鱼还有什么区别？翻译：涸辙遗鲋，旦暮成枯。人而无志，与彼何殊？ 主要是看气质。翻译：请君莫羡解花语，腹有诗书气自华。 人与人之间的基本信任呢？翻译：长恨人心不如水，等闲平地起波澜。 这届人民不行。翻译：近世愚民，乱我君臣。 来啊，互相伤害啊！翻译：招尔互攻，相损相从。 每天都被自己帅到睡不着。翻译：玉树临风美少年，揽镜自顾夜不眠。 老司机带带我。翻译：太仆老识途，携我同游乎？ 没有想到你是这样的人！翻译：未知汝乃如此之人哉！ 辣眼睛。翻译：以目尝之，其味甚辛。 当时我就懵逼了。翻译：余顿怔怔，魂散无声。 这东西太重要，我要上交给国家。翻译：国之重器，当奉朝廷。 我带着你，你带着钱。翻译：执子之手，子执资斧。 有钱，就是任性。翻译：家有千金，行止由心。 你这么牛逼咋不上天呢？翻译：阁下何不同风起，扶摇直上九万里？ 世界那么大，我想去看看。翻译：天地玄黄，宇宙洪荒。愿泛浮萍，从容漂洋。 你脸可真大。翻译：君额上似可跑马。 我喜欢的人不喜欢我。翻译：我心向水，君心向山。 秀恩爱，死得快。翻译：爱而不藏，自取其亡。 沉默不都是金子，有时候还可能是孙子。翻译：圣人不言如桃李，闲人不言若木鸡。 宝宝心里苦，但宝宝不说。翻译：孺子含辛，隐忍不嗔。 明明可以靠脸吃饭，偏偏要靠才华。翻译：中华儿女多奇志，不爱红装爱才智。 今天就到这里吧，以后和别人交流的时候尝试用一下，保证不被人打死。作者：司徒静峰","categories":[{"name":"文言文","slug":"文言文","permalink":"https://sifengjing.github.io/categories/文言文/"}],"tags":[{"name":"流行语","slug":"流行语","permalink":"https://sifengjing.github.io/tags/流行语/"},{"name":"文化碰撞","slug":"文化碰撞","permalink":"https://sifengjing.github.io/tags/文化碰撞/"}]},{"title":"Markdowwn应用范围及语法规范","slug":"Markdowwn应用范围及语法规范","date":"2018-12-11T02:10:37.000Z","updated":"2018-12-11T09:35:26.126Z","comments":true,"path":"2018/12/11/Markdowwn应用范围及语法规范/","link":"","permalink":"https://sifengjing.github.io/2018/12/11/Markdowwn应用范围及语法规范/","excerpt":"","text":"Markdown应用范围及语法规范 使用 Markdown 我们可以： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 作者：司徒静峰","categories":[{"name":"Markdown","slug":"Markdown","permalink":"https://sifengjing.github.io/categories/Markdown/"}],"tags":[{"name":"标记语言","slug":"标记语言","permalink":"https://sifengjing.github.io/tags/标记语言/"},{"name":"Markdown语法","slug":"Markdown语法","permalink":"https://sifengjing.github.io/tags/Markdown语法/"}]},{"title":"使用hexo d 报错","slug":"使用hexo d 报错","date":"2018-11-13T09:49:33.000Z","updated":"2018-12-11T09:46:01.200Z","comments":true,"path":"2018/11/13/使用hexo d 报错/","link":"","permalink":"https://sifengjing.github.io/2018/11/13/使用hexo d 报错/","excerpt":"","text":"使用hexo d 提示You should configure deployment settings in _config.yml first!问题: 使用hexo d 提示You should configure deployment settings in _config.yml first!Available deployer plugins:gitFor more help, you can check the online docs: http://hexo.io/解决问题:1.排查-&gt;是否安装一下hexo-deployer-git这个模块没有安装:npm install hexo-deployer-git –save使用指令安装2.排查-&gt;_config.yml 这个文件的deploy写了没有;写全了没有我的就是因为_config.yml中deploy下的type等前面没有空格导致。。。。。以下为正确的写法(图片): 作者：司徒静峰","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://sifengjing.github.io/categories/Hexo/"}],"tags":[{"name":"hexo报错","slug":"hexo报错","permalink":"https://sifengjing.github.io/tags/hexo报错/"},{"name":"建站经验","slug":"建站经验","permalink":"https://sifengjing.github.io/tags/建站经验/"}]},{"title":"Hexo 踩坑","slug":"Hexo 踩坑","date":"2018-04-27T15:00:34.000Z","updated":"2018-12-11T10:09:43.750Z","comments":true,"path":"2018/04/27/Hexo 踩坑/","link":"","permalink":"https://sifengjing.github.io/2018/04/27/Hexo 踩坑/","excerpt":"","text":"hexo 部署到GitHub时报错 ERROR Process failed: about/index.md TypeError: Cannot read property ‘utcOffset’ of null折腾了半天发现原来站点的配置文件的timezone也就是时区必须要和主题的的配置文件一直，把这两个文件下的timezone都设为Asia/Shanghai就解决了作者：司徒静峰","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://sifengjing.github.io/categories/Hexo/"}],"tags":[{"name":"hexo报错","slug":"hexo报错","permalink":"https://sifengjing.github.io/tags/hexo报错/"},{"name":"建站经验","slug":"建站经验","permalink":"https://sifengjing.github.io/tags/建站经验/"}]}]}